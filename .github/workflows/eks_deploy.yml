name: CI/CD Pipeline for EKS

on:
  workflow_run:
    workflows: ["Push a Docker Image"]
    types:
      - completed

jobs:
  deploy-to-eks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Configure AWS credentials using GitHub Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Install kubectl
    - name: Install kubectl
      run: |
        curl -LO "https://amazon-eks.s3-us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    # Install eksctl
    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin   

    # Check if EKS cluster exists, create if not
    - name: Check and Create EKS Cluster
      id: eks_check
      run: |
        set -e
        CLUSTER_NAME="r4cluster"
        REGION="us-east-1"
        CLUSTER_EXISTS=$(eksctl get cluster --region $REGION --name $CLUSTER_NAME --output json | grep "\"name\"" || true)
        if [[ -z "$CLUSTER_EXISTS" ]]; then
          echo "EKS Cluster $CLUSTER_NAME does not exist. Creating..."
          eksctl create cluster \
            --name=$CLUSTER_NAME \
            --region=$REGION \
            --version=1.27 \
            --node-type=t2.medium \
            --nodes=2 \
            --managed \
            --asg-access
          echo "cluster_created=true" >> $GITHUB_ENV
        else
          echo "EKS Cluster $CLUSTER_NAME already exists."
          echo "cluster_created=false" >> $GITHUB_ENV
        fi

    # Update kubeconfig for your EKS cluster
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name r4cluster --region us-east-1
        eksctl get cluster
        kubectl get nodes
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
        eksctl utils associate-iam-oidc-provider --region us-east-1 --cluster r4cluster --approve
        curl -Lo iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
        aws iam create-policy --policy-name ALBIngressControllerIAMPolicy --policy-document file://iam-policy.json || true
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
        eksctl create iamserviceaccount \
           --cluster r4cluster \
           --namespace kube-system \
           --name aws-load-balancer-controller \
           --attach-policy-arn arn:aws:iam::${ACCOUNT_ID}:policy/ALBIngressControllerIAMPolicy \
           --override-existing-serviceaccounts \
           --approve
        helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
          --set clusterName=r4cluster \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller \
          --namespace kube-system


    # Deploy to EKS using kubectlj
    - name: Deploy to EKS
      run: |
        kubectl apply -f deploy_auto_scale.yaml
        echo kubectl get svc

    # Get the LoadBalancer service URL (instead of echoing the command)
    - name: Get Service URL
      run: |
        kubectl get svc my-svc-v3 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        echo "Service is available at: $(kubectl get svc my-svc-v3 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
        kubectl get svc -n ingress-nginx
        kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        echo "Ingres service is available at: $(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
        kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

    # Optionally check status of the deployment
    - name: Check Deployment Status
      run: kubectl rollout status deployment/myapp-deployment
