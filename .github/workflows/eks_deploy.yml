name: CI/CD Pipeline for EKS

on:
  workflow_run:
    workflows: ["Push a Docker Image"] # This refers to the name of the first workflow
    types:
      - completed

jobs:
  deploy-to-eks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Configure AWS credentials using GitHub Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 # Specify your region

    # Install kubectl
    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
     # Install kubectl
    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin   
    - name: Create EKS cluster
      run: |
        eksctl create cluster \
          --name=r4cluster \
          --region=ap-south-1 \
          --version=1.30 \
          --nodegroup-name=myNodegrp \
          --node-type=t2.micro \
          --node-ami-family=AmazonLinux2023 \
          --nodes=3 \
          --nodes-min=1 \
          --nodes-max=3 \
          --managed

    # Update kubeconfig for your EKS cluster
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name r4cluster --region ap-south-1

    # Deploy to EKS using kubectl
    - name: Deploy to EKS
      run: |
        kubectl apply -f deploy_auto_scale.yaml
        echo kubectl get svc
# Get the LoadBalancer service URL (instead of echoing the command)
    - name: Get Service URL
      run: |
        kubectl get svc my-svc-v3 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        echo "Service is available at: $(kubectl get svc my-svc-v3 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
    # Optionally check status of the deployment
    - name: Check Deployment Status
      run: kubectl rollout status deployment/myapp-deployment
