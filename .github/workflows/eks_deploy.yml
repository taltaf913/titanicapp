name: CI/CD Pipeline for EKS

on:
  workflow_run:
    workflows: ["Push a Docker Image"]
    types:
      - completed

jobs:
  deploy-to-eks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Configure AWS credentials using GitHub Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Install kubectls
    - name: Install kubectl
      run: |
        curl -LO "https://amazon-eks.s3-us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    # Install eksctl
    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin   

    # Check if EKS cluster exists, create if not
    - name: Check and Create EKS Cluster
      id: eks_check
      run: |
        set -e
        CLUSTER_NAME="r4cluster"
        REGION="us-east-1"
        CLUSTER_EXISTS=$(eksctl get cluster --region $REGION --name $CLUSTER_NAME --output json | grep "\"name\"" || true)
        if [[ -z "$CLUSTER_EXISTS" ]]; then
          echo "EKS Cluster $CLUSTER_NAME does not exist. Creating..."
          eksctl create cluster \
            --name=$CLUSTER_NAME \
            --region=$REGION \
            --version=1.32 \
            --node-type=t2.medium \
            --nodes=2 \
            --managed \
            --asg-access
          echo "cluster_created=true" >> $GITHUB_ENV
        else
          echo "EKS Cluster $CLUSTER_NAME already exists."
          echo "cluster_created=false" >> $GITHUB_ENV
        fi

    # Update kubeconfig for your EKS cluster
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name r4cluster --region us-east-1
        eksctl get cluster
        kubectl get nodes
        sudo apt install jq -y



    # Deploy to EKS using kubectlj
    - name: Deploy to EKS
      run: |
        kubectl apply -f deploy_auto_scale.yaml
        echo kubectl get svc

    # Get the LoadBalancer service URL (instead of echoing the command)
    - name: Get Service URL
      run: |
        kubectl get svc my-svc-v3 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        echo "Service is available at: $(kubectl get svc my-svc-v3 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
        export ARGOCD_SERVER=`kubectl get svc argocd-server -n argocd -o json | jq --raw-output '.status.loadBalancer.ingress[0].hostname'`
        export ARGO_PWD=`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d`
        echo $ARGO_PWD
        kubectl get svc argocd-server -n argocd
        
  

    # Optionally check status of the deployment
    - name: Check Deployment Status
      run: kubectl rollout status deployment/myapp-deployment
